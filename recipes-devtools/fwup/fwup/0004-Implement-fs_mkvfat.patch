From 65709e7d72522b00b4669c25aacb3e9977d17331 Mon Sep 17 00:00:00 2001
From: Carsten Hansen <Carsten.Hansen@bksv.com>
Date: Mon, 21 Jan 2019 18:02:09 +0800
Subject: [PATCH] Implement fs_mkvfat

---
 README.md       |  1 +
 src/cfgfile.c   |  3 ++-
 src/functions.c | 36 ++++++++++++++++++++++++++++++++++++
 3 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 1cd4ff7..e13f68b 100644
--- a/README.md
+++ b/README.md
@@ -568,6 +568,7 @@ uboot_setenv(my_uboot_env, name, value) | 0.10.0 | Set the specified U-boot vari
 uboot_unsetenv(my_uboot_env, name)      | 0.10.0 | Unset the specified U-boot variable
 mmc_setbootpart(partition)              | 0.17.0 | Mark the specified eMMC boot partition as active in the extcsd record. The `partition` number must be 1 or 2
 mmc_writebootpart(partition, offset)    | 0.17.0 | Write a resource to the specified eMMC boot partition. The `offset` is specified as a number of 512-byte blocks, and the `partition` number must be 1 or 2. The boot partition will be left write-protected
+fs_mkvfat(partition, options)           | 0.17.0 | Create a vfat filesystem on the specified `partition`. The `options` parameter is passed to the underlying mkfs.vfat command and may be an empty string. The new partition will be left unmounted
 
 ## Sparse files
 
diff --git a/src/cfgfile.c b/src/cfgfile.c
index 79ae653..867c676 100644
--- a/src/cfgfile.c
+++ b/src/cfgfile.c
@@ -496,7 +496,8 @@ static cfg_opt_t uboot_environment_opts[] = {
     CFG_FUNC("pipe_write", CB), \
     CFG_FUNC("execute", CB), \
     CFG_FUNC("mmc_writebootpart", CB), \
-    CFG_FUNC("mmc_setbootpart", CB)
+    CFG_FUNC("mmc_setbootpart", CB), \
+    CFG_FUNC("fs_mkvfat", CB)
 
 static cfg_opt_t task_on_init_opts[] = {
     CFG_ON_EVENT_FUNCTIONS(cb_on_init_func),
diff --git a/src/functions.c b/src/functions.c
index ec102bf..4de6795 100644
--- a/src/functions.c
+++ b/src/functions.c
@@ -66,6 +66,7 @@ DECLARE_FUN(pipe_write);
 DECLARE_FUN(execute);
 DECLARE_FUN(mmc_writebootpart);
 DECLARE_FUN(mmc_setbootpart);
+DECLARE_FUN(fs_mkvfat);
 
 struct fun_info {
     const char *name;
@@ -103,6 +104,7 @@ static struct fun_info fun_table[] = {
     FUN_INFO(execute),
     FUN_INFO(mmc_writebootpart),
     FUN_INFO(mmc_setbootpart),
+    FUN_INFO(fs_mkvfat),
 };
 
 static struct fun_info *lookup(int argc, const char **argv)
@@ -1317,3 +1319,37 @@ int mmc_setbootpart_run(struct fun_context *fctx)
     progress_report(fctx->progress, FWUP_BLOCK_SIZE);
     return 0;
 }
+
+int fs_mkvfat_validate(struct fun_context *fctx)
+{
+    if (fctx->argc != 3)
+        ERR_RETURN("fs_mkvfat requires a partition number and an options list");
+
+    CHECK_ARG_UINT64(fctx->argv[1], "fs_mkvfat requires a non-negative partition number");
+
+    return 0;
+}
+int fs_mkvfat_compute_progress(struct fun_context *fctx)
+{
+    fctx->progress->total_units += FWUP_BLOCK_SIZE; // Arbitarily count as 1 block
+    return 0;
+}
+int fs_mkvfat_run(struct fun_context *fctx)
+{
+    assert(fctx->on_event);
+
+    int partition = strtol(fctx->argv[1], NULL, 0);
+    const char *options = fctx->argv[2];
+
+    char cmd[128];
+    snprintf(cmd, sizeof(cmd), "mkfs.vfat %s %sp%d > /dev/null", options, fctx->mmc_device_path, partition);
+
+    int status = system(cmd);
+    if (status < 0)
+        ERR_RETURN("fs_mkvfat couldn't run '%s'", cmd);
+    if (status != 0)
+        ERR_RETURN("'%s' failed with exit status %d", cmd, status);
+
+    progress_report(fctx->progress, FWUP_BLOCK_SIZE);
+    return 0;
+}
