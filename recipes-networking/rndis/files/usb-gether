#!/bin/sh

#
# usb_gether
#
# Adapted for B&K SXU, based on ev3-usb-sh found at
# https://github.com/ev3dev/ev3-systemd/blob/ev3dev-jessie/scripts/ev3-usb.sh
#
# Original copyright notice:
#
# USB Gadget for LEGO MINDSTORMS EV3 hardware
#
# Copyright (C) 2015,2017 David Lechner <david@lechnology.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#

g="/sys/kernel/config/usb_gadget/rndisdev"

sxu_usb_up() {
    udc_device="ci_hdrc.0" # The USB Device Controller in the SXU
    usb_ver="0x0200" # USB 2.0
    dev_class="2" # Communications
    vid="0x12E4" # B&K
    pid="0x1040" # SXU, PID documented in TN14404
    device="0x1000" # this should be incremented any time there are breaking changes
                    # to this script so that the host OS sees it as a new device and
                    # re-enumerates everything rather than relying on cached values
    mfg="Brüel & Kjær"
    prod="Sound Level Meter"
    read -r serial</mnt/config/serial_number
    attr="0xC0" # Self-powered
    pwr="500" # mA
    cfg="RNDIS"
    ms_vendor_code="0xcd" # Microsoft
    ms_qw_sign="MSFT100" # also Microsoft (if you couldn't tell)
    ms_compat_id="RNDIS" # matches Windows RNDIS Drivers
    ms_subcompat_id="5162001" # matches Windows RNDIS 6.0 Driver

    if [ -d ${g} ]; then
        if [ "$(cat ${g}/UDC)" != "" ]; then
            echo "Gadget is already up."
            exit 1
        fi
        echo "Cleaning up old directory..."
        sxu_usb_down
    fi
    echo "Setting up gadget..."

    # Create a new gadget

    mkdir ${g}
    echo "${usb_ver}" > ${g}/bcdUSB
    echo "${dev_class}" > ${g}/bDeviceClass
    echo "${vid}" > ${g}/idVendor
    echo "${pid}" > ${g}/idProduct
    echo "${device}" > ${g}/bcdDevice
    mkdir ${g}/strings/0x409
    echo "${mfg}" > ${g}/strings/0x409/manufacturer
    echo "${prod}" > ${g}/strings/0x409/product
    echo "${serial}" > ${g}/strings/0x409/serialnumber

    # Create RNDIS configuration

    mkdir ${g}/configs/rndis.1
    echo "${attr}" > ${g}/configs/rndis.1/bmAttributes
    echo "${pwr}" > ${g}/configs/rndis.1/MaxPower
    mkdir ${g}/configs/rndis.1/strings/0x409
    echo "${cfg}" > ${g}/configs/rndis.1/strings/0x409/configuration

    # Define Microsoft OS Descriptor to load RNDIS 6.0 driver on Windows

    echo "1" > ${g}/os_desc/use
    echo "${ms_vendor_code}" > ${g}/os_desc/b_vendor_code
    echo "${ms_qw_sign}" > ${g}/os_desc/qw_sign

    # Create the RNDIS function, including the Microsoft-specific bits

    mkdir ${g}/functions/rndis.usb0
    echo "${ms_compat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/compatible_id
    echo "${ms_subcompat_id}" > ${g}/functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id

    # Link everything up and bind the USB device

    ln -s ${g}/functions/rndis.usb0 ${g}/configs/rndis.1
    ln -s ${g}/configs/rndis.1 ${g}/os_desc
    echo "${udc_device}" > ${g}/UDC

    if [ ! -s /mnt/bksv/system-connections/usb0* ]; then
        if [ -f /mnt/bksv/system-connections/usb0* ]; then
            # This may happen if the device was not shut down
            # cleanly immediately after creating the connection
            echo "Deleting empty usb0 file"                      
            rm -f /mnt/bksv/system-connections/usb0*
        fi            
        echo "Creating default usb0 connection using link-local configuration"
        nmcli con add con-name usb0 ifname usb0 type ethernet ipv4.method "link-local"
    fi

    nmcli con up usb0

    echo "Done."
}

sxu_usb_down() {
    if [ ! -d ${g} ]; then
        echo "Gadget is already down."
        exit 1
    fi
    echo "Taking down gadget..."

    nmcli con down usb0

    # Have to unlink and remove directories in reverse order.
    # Checks allow to finish takedown after error.

    if [ "$(cat ${g}/UDC)" != "" ]; then
        echo "" > ${g}/UDC
    fi
    rm -f ${g}/os_desc/rndis.1
    rm -f ${g}/configs/rndis.1/rndis.usb0
    [ -d ${g}/functions/rndis.usb0 ] && rmdir ${g}/functions/rndis.usb0
    [ -d ${g}/configs/rndis.1/strings/0x409 ] && rmdir ${g}/configs/rndis.1/strings/0x409
    [ -d ${g}/configs/rndis.1 ] && rmdir ${g}/configs/rndis.1
    [ -d ${g}/strings/0x409 ] && rmdir ${g}/strings/0x409
    rmdir ${g}

    echo "Done."
}

case "$1" in
        start|"")
                sxu_usb_up
                ;;
        stop)
                sxu_usb_down
                ;;
        *)
                echo "Usage: usb-gether {start|stop}" >&2
                exit 1
                ;;
esac

exit 0
